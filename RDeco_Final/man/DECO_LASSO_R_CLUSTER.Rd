% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DECOR_CLUSTER.R
\name{DECO_LASSO_R_CLUSTER}
\alias{DECO_LASSO_R_CLUSTER}
\title{DECO Clusterized Algorithm (Pure R)}
\usage{
DECO_LASSO_R_CLUSTER(Y, X, p, n, lambda, r_1, clust, r_2 = r_1, ncores = 1,
  intercept = TRUE, refinement = TRUE)
}
\arguments{
\item{Y}{gives the nx1 vector of observations we wish to approximate with a linear model of type Y = Xb + e}

\item{X}{gives the nxp matrix of regressors, each column corresponding to a different regressor}

\item{p}{is the column dimension of X [equivalently, p is the number of regressor variables].}

\item{n}{is the row dimension of X (and Y) [equivalently, n is the number of observations/individuals].}

\item{lambda}{gives the (fixed) penalty magnitude in the LASSO fit of the algorithm}

\item{r_1}{is a tweaking parameter for making the inverse more robust (as we take inverse of XX + r_1*I)}

\item{clust}{an object obtained by \code{makePSOCKcluster}}

\item{r_2}{is a tweaking parameter for making the inverse more robust (as we take inverse of X_MX_M + r_2*I)}

\item{ncores}{determines the number of threads used on each machine to parallelize computation}

\item{intercept}{determines whether to include an intercept in the model or not}

\item{refinement}{determines whether to include the refinement step (Stage 3 of the algorithm)}
}
\description{
DECO Clusterized Algorithm (Pure R)
}
\details{
The algorithm is based on the description in "DECOrrelated feature space partitioning
         for distributed sparse regression" in Wang, Dunson, and Leng (2016) if lambda is fixed and
         LASSO is used as the penalized regression scheme. The rotated versions of Y and X the authors denote
         with Tilde are denoted as X* and Y* in the comments below
}
\note{
-This implementation uses only R functions.

- This implementation is meant to distribute the load of work to several machines. Note that the current implementation
does not deal with the problem of storing big matrices; this function is just the starting step and it should be
further developed (i.e. reading the matrix chunckwise from a file, C++ implementation,parallelizing on each
machine,...).
}
\author{
Samuel Davenport, Jack Carter, Giulio Morina, Jeremias Knoblauch
}

