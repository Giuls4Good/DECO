// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// SThres
arma::vec SThres(arma::vec beta, arma::mat X, arma::vec Y, double lambda, int n, int p);
RcppExport SEXP Version2_SThres(SEXP betaSEXP, SEXP XSEXP, SEXP YSEXP, SEXP lambdaSEXP, SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(SThres(beta, X, Y, lambda, n, p));
    return rcpp_result_gen;
END_RCPP
}
// update_cov
arma::vec update_cov(arma::vec& beta, arma::mat& X, const arma::vec& Y, double lambda, unsigned int n, unsigned int p, unsigned int k, double n_inv, arma::mat& XXCP, const arma::vec& XYCP, arma::Col<unsigned int>& inModelIndices, arma::Col<unsigned char>& inModelBool, arma::vec& gradients);
RcppExport SEXP Version2_update_cov(SEXP betaSEXP, SEXP XSEXP, SEXP YSEXP, SEXP lambdaSEXP, SEXP nSEXP, SEXP pSEXP, SEXP kSEXP, SEXP n_invSEXP, SEXP XXCPSEXP, SEXP XYCPSEXP, SEXP inModelIndicesSEXP, SEXP inModelBoolSEXP, SEXP gradientsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type p(pSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type n_inv(n_invSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type XXCP(XXCPSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type XYCP(XYCPSEXP);
    Rcpp::traits::input_parameter< arma::Col<unsigned int>& >::type inModelIndices(inModelIndicesSEXP);
    Rcpp::traits::input_parameter< arma::Col<unsigned char>& >::type inModelBool(inModelBoolSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gradients(gradientsSEXP);
    rcpp_result_gen = Rcpp::wrap(update_cov(beta, X, Y, lambda, n, p, k, n_inv, XXCP, XYCP, inModelIndices, inModelBool, gradients));
    return rcpp_result_gen;
END_RCPP
}
// coordinateDescent_cov
arma::vec coordinateDescent_cov(arma::mat& X, arma::vec& Y, double lambda, double precision, unsigned int max_iter);
RcppExport SEXP Version2_coordinateDescent_cov(SEXP XSEXP, SEXP YSEXP, SEXP lambdaSEXP, SEXP precisionSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(coordinateDescent_cov(X, Y, lambda, precision, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// update_naive
arma::vec update_naive(arma::vec& beta, arma::mat& X, arma::vec& Y, double lambda, int n, int p);
RcppExport SEXP Version2_update_naive(SEXP betaSEXP, SEXP XSEXP, SEXP YSEXP, SEXP lambdaSEXP, SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(update_naive(beta, X, Y, lambda, n, p));
    return rcpp_result_gen;
END_RCPP
}
// coordinateDescent_naive
arma::vec coordinateDescent_naive(arma::mat& X, arma::vec& Y, double lambda, double precision, int max_iter);
RcppExport SEXP Version2_coordinateDescent_naive(SEXP XSEXP, SEXP YSEXP, SEXP lambdaSEXP, SEXP precisionSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(coordinateDescent_naive(X, Y, lambda, precision, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// solverTester
arma::vec solverTester(arma::mat X, arma::vec Y);
RcppExport SEXP Version2_solverTester(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(solverTester(X, Y));
    return rcpp_result_gen;
END_RCPP
}
